# Azure WebApp Demo - Deploy Workflow
#
# PII COMPLIANCE NOTE:
# This workflow deploys demo infrastructure with documented PII exceptions.
# Project requirement: "Treat all data as critical PII"
# See docs/pii-compliance.md for production deployment guidance.

name: Azure WebApp Demo - Deploy

on:
  # Manual deployment trigger (click "Run workflow" button)
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment"
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      cleanup_hours:
        description: "Auto-cleanup after X hours (0 = no auto-cleanup)"
        required: true
        default: '2'
        type: string
      budget_alert:
        description: "Budget alert amount (USD)"
        required: true
        default: '10'
        type: string
      skip_tests:
        description: "Skip validation tests (faster deployment)"
        type: boolean
        default: false
      force_deploy:
        description: "Force deployment (skip confirmations)"
        type: boolean
        default: true

  # Automatic validation on code changes (no deployment)
  push:
    branches: [ main ]
    paths:
      - 'app/**'
      - 'terraform/**'
      - 'scripts/**'
      - '.github/workflows/**'

  # API trigger for command-line deployment
  repository_dispatch:
    types: [deploy-demo]

env:
  ENVIRONMENT: ${{ github.event.inputs.environment || github.event.client_payload.environment || 'dev' }}
  CLEANUP_HOURS: ${{ github.event.inputs.cleanup_hours || github.event.client_payload.cleanup_hours || '2' }}
  BUDGET_ALERT: ${{ github.event.inputs.budget_alert || github.event.client_payload.budget_alert || '10' }}
  SKIP_TESTS: ${{ github.event.inputs.skip_tests || github.event.client_payload.skip_tests || 'false' }}
  FORCE_DEPLOY: ${{ github.event.inputs.force_deploy || github.event.client_payload.force_deploy || 'true' }}

jobs:
  # Validation job - runs on push (no Azure deployment)
  validate:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.5.0'

      - name: Install dependencies
        run: |
          pip install -r requirements-testing.txt
          pip install -r requirements-cost-monitoring.txt

      - name: Run validation tests
        run: |
          echo "Running validation tests..."
          ./scripts/test-end-to-end.sh --quick

      - name: Validate Terraform configuration
        run: |
          cd terraform
          terraform init -backend=false
          terraform validate

      - name: Validation summary
        run: |
          echo "## Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Scripts**: All syntax validation passed" >> $GITHUB_STEP_SUMMARY
          echo "- **Terraform**: Configuration validation passed" >> $GITHUB_STEP_SUMMARY
          echo "- **Python**: Application validation passed" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: Ready for greenfield deployment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Greenfield Deployment Options" >> $GITHUB_STEP_SUMMARY
          echo "1. **GitHub Actions**: Run 'Azure WebApp Demo' workflow manually" >> $GITHUB_STEP_SUMMARY
          echo "2. **Command Line**: \`./scripts/deploy-github.sh\`" >> $GITHUB_STEP_SUMMARY
          echo "3. **Local**: \`./scripts/deploy.sh\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Prerequisites for Deployment" >> $GITHUB_STEP_SUMMARY
          echo "- Azure credentials configured in repository secrets" >> $GITHUB_STEP_SUMMARY
          echo "- No existing infrastructure required (greenfield)" >> $GITHUB_STEP_SUMMARY

  # Deployment job - runs on manual trigger (requires Azure setup)
  deploy:
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'repository_dispatch'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || github.event.client_payload.environment || 'dev' }}
    permissions:
      id-token: write
      contents: read
      actions: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.5.0'

      - name: Setup Azure CLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Install dependencies
        run: |
          pip install -r requirements-testing.txt
          pip install -r requirements-cost-monitoring.txt

      - name: Run validation tests
        if: env.SKIP_TESTS == 'false'
        run: |
          echo "Running validation tests..."
          ./scripts/test-end-to-end.sh --quick
        continue-on-error: false

      - name: Deploy infrastructure and application
        run: |
          echo "Starting deployment to $ENVIRONMENT environment..."
          echo "Cleanup hours: $CLEANUP_HOURS"
          echo "Budget alert: $BUDGET_ALERT"

          # Set deployment parameters
          DEPLOY_ARGS=""
          if [ "$CLEANUP_HOURS" != "0" ]; then
            DEPLOY_ARGS="$DEPLOY_ARGS --cleanup-hours $CLEANUP_HOURS"
          else
            DEPLOY_ARGS="$DEPLOY_ARGS --no-cleanup"
          fi

          if [ "$BUDGET_ALERT" != "10" ]; then
            DEPLOY_ARGS="$DEPLOY_ARGS --budget $BUDGET_ALERT"
          fi

          # Execute deployment
          ./scripts/deploy.sh $DEPLOY_ARGS
        env:
          TF_VAR_environment: ${{ env.ENVIRONMENT }}
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_USE_OIDC: true
          ARM_OIDC_REQUEST_TOKEN: ${{ env.ACTIONS_ID_TOKEN_REQUEST_TOKEN }}
          ARM_OIDC_REQUEST_URL: ${{ env.ACTIONS_ID_TOKEN_REQUEST_URL }}

      - name: Get deployment outputs
        id: outputs
        run: |
          cd terraform
          # Use correct Terraform output names from outputs.tf
          APP_URL=$(terraform output -raw webapp_url 2>/dev/null || echo "")
          RESOURCE_GROUP=$(terraform output -raw resource_group 2>/dev/null || echo "")

          # Only set outputs if we got valid values
          if [[ -n "$APP_URL" && "$APP_URL" != "" ]]; then
            echo "app_url=https://$APP_URL" >> $GITHUB_OUTPUT
          else
            echo "app_url=Not available" >> $GITHUB_OUTPUT
          fi

          if [[ -n "$RESOURCE_GROUP" && "$RESOURCE_GROUP" != "" ]]; then
            echo "resource_group=$RESOURCE_GROUP" >> $GITHUB_OUTPUT
          else
            echo "resource_group=Not available" >> $GITHUB_OUTPUT
          fi
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_USE_OIDC: true

      - name: Test deployment
        if: env.SKIP_TESTS == 'false'
        run: |
          echo "Testing deployed application..."
          if [ "${{ steps.outputs.outputs.app_url }}" != "https://Not available" ]; then
            # Wait for app to be ready
            sleep 30
            
            # Test endpoints
            curl -f "${{ steps.outputs.outputs.app_url }}" || echo "Random quote API test failed"
            curl -f "${{ steps.outputs.outputs.app_url }}/healthz" || echo "Health check failed"
            curl -f "${{ steps.outputs.outputs.app_url }}/db-test" || echo "Database test failed"
          fi

      - name: Generate cost report
        run: |
          echo "Generating cost report..."
          ./scripts/cost-monitor.sh --actual --export deployment-costs.json || true

      - name: Upload cost report
        uses: actions/upload-artifact@v4
        with:
          name: cost-report-${{ env.ENVIRONMENT }}-${{ github.run_number }}
          path: deployment-costs.json
          retention-days: 30

      - name: Setup automatic cleanup
        if: env.CLEANUP_HOURS != '0'
        run: |
          echo "Setting up automatic cleanup in $CLEANUP_HOURS hours..."
          ./scripts/setup-azure-automation.sh \
            --cleanup-hours $CLEANUP_HOURS \
            --resource-group ${{ steps.outputs.outputs.resource_group }}-automation || true

      - name: Deployment summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: $ENVIRONMENT" >> $GITHUB_STEP_SUMMARY
          echo "- **Application URL**: ${{ steps.outputs.outputs.app_url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Resource Group**: ${{ steps.outputs.outputs.resource_group }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Auto-cleanup**: $CLEANUP_HOURS hours" >> $GITHUB_STEP_SUMMARY
          echo "- **Budget Alert**: \$$BUDGET_ALERT" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Quick Actions" >> $GITHUB_STEP_SUMMARY
          echo "- Test app: [${{ steps.outputs.outputs.app_url }}](${{ steps.outputs.outputs.app_url }})" >> $GITHUB_STEP_SUMMARY
          echo "- Monitor costs: \`./scripts/cost-monitor.sh --actual\`" >> $GITHUB_STEP_SUMMARY
          echo "- Manual cleanup: \`./scripts/cleanup.sh\`" >> $GITHUB_STEP_SUMMARY

  deploy-failed-execute-cleanup:
    runs-on: ubuntu-latest
    needs: deploy
    # Only cleanup on actual deployment failures, not validation issues
    # Note: Validation is now non-blocking, so this should only trigger on infrastructure failures
    if: failure() && github.event.inputs.force_deploy == 'true'
    environment: ${{ github.event.inputs.environment || 'dev' }}
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.5.0'

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Execute cleanup after failed deployment
        run: |
          echo "Cleaning up resources after failed deployment..."
          echo "Environment: ${{ github.event.inputs.environment || 'dev' }}"
          echo "ARM_CLIENT_ID: ${ARM_CLIENT_ID:0:8}..."
          echo "ARM_TENANT_ID: ${ARM_TENANT_ID:0:8}..."
          echo "ARM_USE_OIDC: $ARM_USE_OIDC"
          ./scripts/cleanup.sh --env ${{ github.event.inputs.environment || 'dev' }} --force || true
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_USE_OIDC: true
          TF_VAR_environment: ${{ github.event.inputs.environment || 'dev' }}


